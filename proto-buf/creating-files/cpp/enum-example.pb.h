// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enum-example.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_enum_2dexample_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_enum_2dexample_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_enum_2dexample_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_enum_2dexample_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_enum_2dexample_2eproto;
class Person;
class PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Person* Arena::CreateMaybeMessage<::Person>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Person_EyeColor : int {
  Person_EyeColor_Unknow_Color = 0,
  Person_EyeColor_Green = 1,
  Person_EyeColor_Blue = 2,
  Person_EyeColor_Person_EyeColor_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Person_EyeColor_Person_EyeColor_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Person_EyeColor_IsValid(int value);
constexpr Person_EyeColor Person_EyeColor_EyeColor_MIN = Person_EyeColor_Unknow_Color;
constexpr Person_EyeColor Person_EyeColor_EyeColor_MAX = Person_EyeColor_Blue;
constexpr int Person_EyeColor_EyeColor_ARRAYSIZE = Person_EyeColor_EyeColor_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Person_EyeColor_descriptor();
template<typename T>
inline const std::string& Person_EyeColor_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Person_EyeColor>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Person_EyeColor_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Person_EyeColor_descriptor(), enum_t_value);
}
inline bool Person_EyeColor_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Person_EyeColor* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Person_EyeColor>(
    Person_EyeColor_descriptor(), name, value);
}
// ===================================================================

class Person PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Person) */ {
 public:
  inline Person() : Person(nullptr) {}
  virtual ~Person();

  Person(const Person& from);
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person& operator=(Person&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Person& default_instance();

  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }
  inline void Swap(Person* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Person* New() const final {
    return CreateMaybeMessage<Person>(nullptr);
  }

  Person* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Person>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Person";
  }
  protected:
  explicit Person(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_enum_2dexample_2eproto);
    return ::descriptor_table_enum_2dexample_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Person_EyeColor EyeColor;
  static constexpr EyeColor Unknow_Color =
    Person_EyeColor_Unknow_Color;
  static constexpr EyeColor Green =
    Person_EyeColor_Green;
  static constexpr EyeColor Blue =
    Person_EyeColor_Blue;
  static inline bool EyeColor_IsValid(int value) {
    return Person_EyeColor_IsValid(value);
  }
  static constexpr EyeColor EyeColor_MIN =
    Person_EyeColor_EyeColor_MIN;
  static constexpr EyeColor EyeColor_MAX =
    Person_EyeColor_EyeColor_MAX;
  static constexpr int EyeColor_ARRAYSIZE =
    Person_EyeColor_EyeColor_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EyeColor_descriptor() {
    return Person_EyeColor_descriptor();
  }
  template<typename T>
  static inline const std::string& EyeColor_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EyeColor>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EyeColor_Name.");
    return Person_EyeColor_Name(enum_t_value);
  }
  static inline bool EyeColor_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EyeColor* value) {
    return Person_EyeColor_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneNumbersFieldNumber = 7,
    kFnameFieldNumber = 2,
    kLnameFieldNumber = 3,
    kImageFieldNumber = 6,
    kAgeFieldNumber = 1,
    kProfileVerifiedFieldNumber = 4,
    kHeightFieldNumber = 5,
    kEyeColorFieldNumber = 8,
  };
  // repeated string phone_numbers = 7;
  int phone_numbers_size() const;
  private:
  int _internal_phone_numbers_size() const;
  public:
  void clear_phone_numbers();
  const std::string& phone_numbers(int index) const;
  std::string* mutable_phone_numbers(int index);
  void set_phone_numbers(int index, const std::string& value);
  void set_phone_numbers(int index, std::string&& value);
  void set_phone_numbers(int index, const char* value);
  void set_phone_numbers(int index, const char* value, size_t size);
  std::string* add_phone_numbers();
  void add_phone_numbers(const std::string& value);
  void add_phone_numbers(std::string&& value);
  void add_phone_numbers(const char* value);
  void add_phone_numbers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& phone_numbers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_phone_numbers();
  private:
  const std::string& _internal_phone_numbers(int index) const;
  std::string* _internal_add_phone_numbers();
  public:

  // string fname = 2;
  void clear_fname();
  const std::string& fname() const;
  void set_fname(const std::string& value);
  void set_fname(std::string&& value);
  void set_fname(const char* value);
  void set_fname(const char* value, size_t size);
  std::string* mutable_fname();
  std::string* release_fname();
  void set_allocated_fname(std::string* fname);
  private:
  const std::string& _internal_fname() const;
  void _internal_set_fname(const std::string& value);
  std::string* _internal_mutable_fname();
  public:

  // string lname = 3;
  void clear_lname();
  const std::string& lname() const;
  void set_lname(const std::string& value);
  void set_lname(std::string&& value);
  void set_lname(const char* value);
  void set_lname(const char* value, size_t size);
  std::string* mutable_lname();
  std::string* release_lname();
  void set_allocated_lname(std::string* lname);
  private:
  const std::string& _internal_lname() const;
  void _internal_set_lname(const std::string& value);
  std::string* _internal_mutable_lname();
  public:

  // bytes image = 6;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // int32 age = 1;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool profile_verified = 4;
  void clear_profile_verified();
  bool profile_verified() const;
  void set_profile_verified(bool value);
  private:
  bool _internal_profile_verified() const;
  void _internal_set_profile_verified(bool value);
  public:

  // double height = 5;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // .Person.EyeColor eye_color = 8;
  void clear_eye_color();
  ::Person_EyeColor eye_color() const;
  void set_eye_color(::Person_EyeColor value);
  private:
  ::Person_EyeColor _internal_eye_color() const;
  void _internal_set_eye_color(::Person_EyeColor value);
  public:

  // @@protoc_insertion_point(class_scope:Person)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> phone_numbers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  bool profile_verified_;
  double height_;
  int eye_color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_enum_2dexample_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Person

// int32 age = 1;
inline void Person::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Person::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Person::age() const {
  // @@protoc_insertion_point(field_get:Person.age)
  return _internal_age();
}
inline void Person::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
}
inline void Person::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:Person.age)
}

// string fname = 2;
inline void Person::clear_fname() {
  fname_.ClearToEmpty();
}
inline const std::string& Person::fname() const {
  // @@protoc_insertion_point(field_get:Person.fname)
  return _internal_fname();
}
inline void Person::set_fname(const std::string& value) {
  _internal_set_fname(value);
  // @@protoc_insertion_point(field_set:Person.fname)
}
inline std::string* Person::mutable_fname() {
  // @@protoc_insertion_point(field_mutable:Person.fname)
  return _internal_mutable_fname();
}
inline const std::string& Person::_internal_fname() const {
  return fname_.Get();
}
inline void Person::_internal_set_fname(const std::string& value) {
  
  fname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Person::set_fname(std::string&& value) {
  
  fname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Person.fname)
}
inline void Person::set_fname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Person.fname)
}
inline void Person::set_fname(const char* value,
    size_t size) {
  
  fname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Person.fname)
}
inline std::string* Person::_internal_mutable_fname() {
  
  return fname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Person::release_fname() {
  // @@protoc_insertion_point(field_release:Person.fname)
  return fname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Person::set_allocated_fname(std::string* fname) {
  if (fname != nullptr) {
    
  } else {
    
  }
  fname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Person.fname)
}

// string lname = 3;
inline void Person::clear_lname() {
  lname_.ClearToEmpty();
}
inline const std::string& Person::lname() const {
  // @@protoc_insertion_point(field_get:Person.lname)
  return _internal_lname();
}
inline void Person::set_lname(const std::string& value) {
  _internal_set_lname(value);
  // @@protoc_insertion_point(field_set:Person.lname)
}
inline std::string* Person::mutable_lname() {
  // @@protoc_insertion_point(field_mutable:Person.lname)
  return _internal_mutable_lname();
}
inline const std::string& Person::_internal_lname() const {
  return lname_.Get();
}
inline void Person::_internal_set_lname(const std::string& value) {
  
  lname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Person::set_lname(std::string&& value) {
  
  lname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Person.lname)
}
inline void Person::set_lname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Person.lname)
}
inline void Person::set_lname(const char* value,
    size_t size) {
  
  lname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Person.lname)
}
inline std::string* Person::_internal_mutable_lname() {
  
  return lname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Person::release_lname() {
  // @@protoc_insertion_point(field_release:Person.lname)
  return lname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Person::set_allocated_lname(std::string* lname) {
  if (lname != nullptr) {
    
  } else {
    
  }
  lname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Person.lname)
}

// bool profile_verified = 4;
inline void Person::clear_profile_verified() {
  profile_verified_ = false;
}
inline bool Person::_internal_profile_verified() const {
  return profile_verified_;
}
inline bool Person::profile_verified() const {
  // @@protoc_insertion_point(field_get:Person.profile_verified)
  return _internal_profile_verified();
}
inline void Person::_internal_set_profile_verified(bool value) {
  
  profile_verified_ = value;
}
inline void Person::set_profile_verified(bool value) {
  _internal_set_profile_verified(value);
  // @@protoc_insertion_point(field_set:Person.profile_verified)
}

// double height = 5;
inline void Person::clear_height() {
  height_ = 0;
}
inline double Person::_internal_height() const {
  return height_;
}
inline double Person::height() const {
  // @@protoc_insertion_point(field_get:Person.height)
  return _internal_height();
}
inline void Person::_internal_set_height(double value) {
  
  height_ = value;
}
inline void Person::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:Person.height)
}

// bytes image = 6;
inline void Person::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& Person::image() const {
  // @@protoc_insertion_point(field_get:Person.image)
  return _internal_image();
}
inline void Person::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:Person.image)
}
inline std::string* Person::mutable_image() {
  // @@protoc_insertion_point(field_mutable:Person.image)
  return _internal_mutable_image();
}
inline const std::string& Person::_internal_image() const {
  return image_.Get();
}
inline void Person::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Person::set_image(std::string&& value) {
  
  image_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Person.image)
}
inline void Person::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Person.image)
}
inline void Person::set_image(const void* value,
    size_t size) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Person.image)
}
inline std::string* Person::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Person::release_image() {
  // @@protoc_insertion_point(field_release:Person.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Person::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Person.image)
}

// repeated string phone_numbers = 7;
inline int Person::_internal_phone_numbers_size() const {
  return phone_numbers_.size();
}
inline int Person::phone_numbers_size() const {
  return _internal_phone_numbers_size();
}
inline void Person::clear_phone_numbers() {
  phone_numbers_.Clear();
}
inline std::string* Person::add_phone_numbers() {
  // @@protoc_insertion_point(field_add_mutable:Person.phone_numbers)
  return _internal_add_phone_numbers();
}
inline const std::string& Person::_internal_phone_numbers(int index) const {
  return phone_numbers_.Get(index);
}
inline const std::string& Person::phone_numbers(int index) const {
  // @@protoc_insertion_point(field_get:Person.phone_numbers)
  return _internal_phone_numbers(index);
}
inline std::string* Person::mutable_phone_numbers(int index) {
  // @@protoc_insertion_point(field_mutable:Person.phone_numbers)
  return phone_numbers_.Mutable(index);
}
inline void Person::set_phone_numbers(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Person.phone_numbers)
  phone_numbers_.Mutable(index)->assign(value);
}
inline void Person::set_phone_numbers(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Person.phone_numbers)
  phone_numbers_.Mutable(index)->assign(std::move(value));
}
inline void Person::set_phone_numbers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  phone_numbers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Person.phone_numbers)
}
inline void Person::set_phone_numbers(int index, const char* value, size_t size) {
  phone_numbers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Person.phone_numbers)
}
inline std::string* Person::_internal_add_phone_numbers() {
  return phone_numbers_.Add();
}
inline void Person::add_phone_numbers(const std::string& value) {
  phone_numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Person.phone_numbers)
}
inline void Person::add_phone_numbers(std::string&& value) {
  phone_numbers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Person.phone_numbers)
}
inline void Person::add_phone_numbers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  phone_numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Person.phone_numbers)
}
inline void Person::add_phone_numbers(const char* value, size_t size) {
  phone_numbers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Person.phone_numbers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Person::phone_numbers() const {
  // @@protoc_insertion_point(field_list:Person.phone_numbers)
  return phone_numbers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Person::mutable_phone_numbers() {
  // @@protoc_insertion_point(field_mutable_list:Person.phone_numbers)
  return &phone_numbers_;
}

// .Person.EyeColor eye_color = 8;
inline void Person::clear_eye_color() {
  eye_color_ = 0;
}
inline ::Person_EyeColor Person::_internal_eye_color() const {
  return static_cast< ::Person_EyeColor >(eye_color_);
}
inline ::Person_EyeColor Person::eye_color() const {
  // @@protoc_insertion_point(field_get:Person.eye_color)
  return _internal_eye_color();
}
inline void Person::_internal_set_eye_color(::Person_EyeColor value) {
  
  eye_color_ = value;
}
inline void Person::set_eye_color(::Person_EyeColor value) {
  _internal_set_eye_color(value);
  // @@protoc_insertion_point(field_set:Person.eye_color)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Person_EyeColor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Person_EyeColor>() {
  return ::Person_EyeColor_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_enum_2dexample_2eproto
